#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 22 21:32:55 2018

Can I extend this I think - simulate portfolio using 
portfolio vol? 

@author: jakemoore
"""

import numpy as np
import math
import matplotlib.pyplot as plt
from scipy.stats import norm
import pandas_datareader as web
import pandas_montecarlo

#import necessary packages


from pandas_datareader import data
 
#download Apple price data into DataFrame
apple = web.get_data_yahoo('AAPL')
 
#calculate the compound annual growth rate (CAGR) which 
#will give us our mean return input (mu) 
days = (apple.index[-1] - apple.index[0]).days
cagr = ((((apple['Adj Close'][-1]) / apple['Adj Close'][1])) ** (365.0/days)) - 1
print ('CAGR =',str(round(cagr,4)*100)+"%")
mu = cagr

#create a series of percentage returns and calculate 
#the annual volatility of returns
apple['Returns'] = apple['Adj Close'].pct_change().fillna(0)
vol = apple['Returns'].std()*math.sqrt(252)
print ("Annual Volatility =",str(round(vol,4)*100)+"%")


apple['return'] = apple['Adj Close'].pct_change().fillna(0) 


#set up empty list to hold our ending values for each simulated price series
result = []
 
#Define Variables
S = apple['Adj Close'][-1] #starting stock price (i.e. last available real stock price)
T = 252 #Number of trading days
mu = cagr #Return
vol = vol #Volatility
 
#choose number of runs to simulate - I have chosen 10,000
for i in range(100000):
    #create list of daily returns using random normal distribution
    daily_returns=np.random.normal(mu/T,vol/math.sqrt(T),T)+1
 
    #set starting price and create price series generated by above random daily returns
    price_list = [S]
 
    for x in daily_returns:
        price_list.append(price_list[-1]*x)
 
    #plot data from each individual run which we will plot at the end
    plt.plot(price_list)
 
    #append the ending value of each simulated run to the empty list we created at the beginning
    result.append(price_list[-1])
 
#show the plot of multiple price series created above
plt.show()
 
#create histogram of ending stock values for our mutliple simulations
plt.hist(result,bins=50)
plt.show()

#use numpy mean function to calculate the mean of the result
print(round(np.mean(result),2))

print("5% quantile =",np.percentile(result,5))
print("95% quantile =",np.percentile(result,95))

plt.hist(result,bins=100)
plt.axvline(np.percentile(result,5), color='r', linestyle='dashed', linewidth=2)
plt.axvline(np.percentile(result,95), color='r', linestyle='dashed', linewidth=2)
plt.show()
